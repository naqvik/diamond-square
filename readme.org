* Implementing the Diamond-Square Terrain Generation algorithm
  This little project is intended as an illustrative example for
  software students, and possibly for instructors, but in large part
  it's an activity designed to give me a little dopamine rush.  The
  project has the following attributes:
  1. follows a simple, understandable development path, and motivates
     the application of some important practises.
     1. use of revision control
     2. use of test-driven development
  2. generates cool graphics
  3. can be easily implemented in many languages


** Background and References
   - The Diamond-Square algorithm is described in this [[https://en.wikipedia.org/wiki/Diamond-square_algorithm][wikipedia]]
     article
   - More inspiration was received from this Bob Martin [[http://blog.cleancoder.com/uncle-bob/2017/01/09/DiamondSquare.html][blog entry]]
   - I chose to implement this in C++17, using TDD.  I used g++-9 and
     the [[https://github.com/onqtam/doctest][doctest]] framework.  It would probably be fun (and easier) to
     write in Python.

** Status
   
   I can create an arbitrary sized array of size 2**n+1.  Tests pass
   for 3x3, 5x5, and 9x9.  I have not yet added the random pertubations.

   I'm shocked at how long it's taken me to get this far.  There's a
   lot I have to remember/learn about c++, git, the doctest testing
   framework.  (The first of these is the big time suck.)  I've been
   on this for 1 week, part-time of course, and I estimate I've spent
   25 hours.

   TODO:
   - [X] write a test spy which verifies the cell access patterns, in text
     mode, for both the
     - [X] Diamond phase and
     - [X] Square phase.
   - [X] write a test to verify the interpolation between cells
   - [X] incrementally implement the rest of the functionality to pass the
     above tests
   - [ ] write a test to verify the inclusion of random perturbations
   - [ ] choose a reasonable graphics library so we can actually /see/
     what the generated grid looks like

