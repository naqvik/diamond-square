* Implementing the Diamond-Square Terrain Generation algorithm
  This little project is intended as an illustrative example for
  software students, and possibly for instructors, but in large part
  it's an activity designed to give me a little dopamine rush.  The
  project has the following attributes:
  1. follows a simple, understandable development path, and motivates
     the application of some important practises.
     1. use of revision control
     2. use of test-driven development
  2. generates cool graphics
  3. can be easily implemented in many languages


** Background and References
   - The Diamond-Square algorithm is described in this [[https://en.wikipedia.org/wiki/Diamond-square_algorithm][wikipedia]]
     article
   - More inspiration was received from this Bob Martin [[http://blog.cleancoder.com/uncle-bob/2017/01/09/DiamondSquare.html][blog entry]]
   - I chose to implement this in C++17, using TDD.  I used g++-9 and
     the [[https://github.com/onqtam/doctest][doctest]] framework.  It would probably be fun (and easier) to
     write in Python.

** Status
   I have at this point done a bare minimum of development.  The test
   framework is in place. One can create grids, the grid size is
   validated, and you can read and write cells.  The remaining parts
   are not too arduous, but they're not here yet.

   TODO:
   - write a test spy which verifies the cell access patterns, in text
     mode, for both the
     - Diamond phase and
     - Square phase.
   - write a test to verify the interpolation between cells
   - write a test to verify the inclusion of random perturbations
   - incrementally implement the rest of the functionality to pass the
     above tests
